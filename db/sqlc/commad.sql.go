// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: commad.sql

package db

import (
	"context"
)

const createCommandRequest = `-- name: CreateCommandRequest :one
INSERT INTO command_requests (
    input_content,
    command_type
) VALUES (
    ?, ?
) RETURNING id, input_content, command_type, created_at
`

type CreateCommandRequestParams struct {
	InputContent string `json:"input_content"`
	CommandType  string `json:"command_type"`
}

func (q *Queries) CreateCommandRequest(ctx context.Context, arg CreateCommandRequestParams) (CommandRequest, error) {
	row := q.db.QueryRowContext(ctx, createCommandRequest, arg.InputContent, arg.CommandType)
	var i CommandRequest
	err := row.Scan(
		&i.ID,
		&i.InputContent,
		&i.CommandType,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCommandRequest = `-- name: DeleteCommandRequest :exec
DELETE FROM command_requests
WHERE id = ?
`

func (q *Queries) DeleteCommandRequest(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCommandRequest, id)
	return err
}

const getCommandRequest = `-- name: GetCommandRequest :one
SELECT id, input_content, command_type, created_at FROM command_requests
WHERE id = ? LIMIT 1
`

func (q *Queries) GetCommandRequest(ctx context.Context, id int64) (CommandRequest, error) {
	row := q.db.QueryRowContext(ctx, getCommandRequest, id)
	var i CommandRequest
	err := row.Scan(
		&i.ID,
		&i.InputContent,
		&i.CommandType,
		&i.CreatedAt,
	)
	return i, err
}

const getCommandRequestsByType = `-- name: GetCommandRequestsByType :many
SELECT id, input_content, command_type, created_at FROM command_requests
WHERE command_type = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type GetCommandRequestsByTypeParams struct {
	CommandType string `json:"command_type"`
	Limit       int64  `json:"limit"`
	Offset      int64  `json:"offset"`
}

func (q *Queries) GetCommandRequestsByType(ctx context.Context, arg GetCommandRequestsByTypeParams) ([]CommandRequest, error) {
	rows, err := q.db.QueryContext(ctx, getCommandRequestsByType, arg.CommandType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CommandRequest{}
	for rows.Next() {
		var i CommandRequest
		if err := rows.Scan(
			&i.ID,
			&i.InputContent,
			&i.CommandType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCommandRequests = `-- name: ListCommandRequests :many
SELECT id, input_content, command_type, created_at FROM command_requests
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListCommandRequestsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListCommandRequests(ctx context.Context, arg ListCommandRequestsParams) ([]CommandRequest, error) {
	rows, err := q.db.QueryContext(ctx, listCommandRequests, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CommandRequest{}
	for rows.Next() {
		var i CommandRequest
		if err := rows.Scan(
			&i.ID,
			&i.InputContent,
			&i.CommandType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCommandRequest = `-- name: UpdateCommandRequest :one
UPDATE command_requests
SET input_content = ?,
    command_type = ?
WHERE id = ?
RETURNING id, input_content, command_type, created_at
`

type UpdateCommandRequestParams struct {
	InputContent string `json:"input_content"`
	CommandType  string `json:"command_type"`
	ID           int64  `json:"id"`
}

func (q *Queries) UpdateCommandRequest(ctx context.Context, arg UpdateCommandRequestParams) (CommandRequest, error) {
	row := q.db.QueryRowContext(ctx, updateCommandRequest, arg.InputContent, arg.CommandType, arg.ID)
	var i CommandRequest
	err := row.Scan(
		&i.ID,
		&i.InputContent,
		&i.CommandType,
		&i.CreatedAt,
	)
	return i, err
}

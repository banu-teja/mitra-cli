// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: entries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getLastNEntries = `-- name: GetLastNEntries :many
WITH last_n_requests AS (
    SELECT id, input_content, command_type, created_at
    FROM command_requests
    ORDER BY created_at DESC
    LIMIT ?
)
SELECT 
    r.id AS request_id,
    r.input_content,
    r.command_type,
    r.created_at AS request_created_at,
    s.id AS subcommand_id,
    s.command,
    s.command_output,
    s.command_status,
    s.execution_order,
    s.created_at AS subcommand_created_at
FROM last_n_requests r
LEFT JOIN sub_commands s ON r.id = s.request_id
ORDER BY r.created_at DESC, s.execution_order
`

type GetLastNEntriesRow struct {
	RequestID           int64          `json:"request_id"`
	InputContent        string         `json:"input_content"`
	CommandType         string         `json:"command_type"`
	RequestCreatedAt    time.Time      `json:"request_created_at"`
	SubcommandID        sql.NullInt64  `json:"subcommand_id"`
	Command             sql.NullString `json:"command"`
	CommandOutput       sql.NullString `json:"command_output"`
	CommandStatus       sql.NullString `json:"command_status"`
	ExecutionOrder      sql.NullInt64  `json:"execution_order"`
	SubcommandCreatedAt sql.NullTime   `json:"subcommand_created_at"`
}

func (q *Queries) GetLastNEntries(ctx context.Context, limit int64) ([]GetLastNEntriesRow, error) {
	rows, err := q.db.QueryContext(ctx, getLastNEntries, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLastNEntriesRow{}
	for rows.Next() {
		var i GetLastNEntriesRow
		if err := rows.Scan(
			&i.RequestID,
			&i.InputContent,
			&i.CommandType,
			&i.RequestCreatedAt,
			&i.SubcommandID,
			&i.Command,
			&i.CommandOutput,
			&i.CommandStatus,
			&i.ExecutionOrder,
			&i.SubcommandCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
